#Redfish Viewer for Gigabyte/AMI systems
#Version 1.0
#2019-08-26
#Python 2 is required; Pythom 3 is not supported
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

import json
import sys

print("Redfish Viewer for Gigabyte/AMI systems")
print("Python 2 is required [2019-08-26]")
userIP = raw_input ("Please enter the IP address AMI BMC: ")
#textb = str(texta)
print("You have entered IP: " + userIP)
userName = raw_input ("Please enter the Username: [by default Administrator] ")
#textf_user = str(text_user)
userPassword = raw_input ("Please enter the Password: [by default superuser] ")
#passwordf_user = str(password_user)
print(" ")

sys = requests.get('https://%s/redfish/v1/Systems/Self' % (userIP),verify=False,auth=(userName,userPassword))
selfa = requests.get('https://%s/redfish/v1/Managers/Self' % (userIP),verify=False,auth=(userName,userPassword))
redfish = requests.get('https://%s/redfish/v1' % (userIP),verify=False,auth=(userName,userPassword))
accounts = requests.get('https://%s/redfish/v1/AccountService/Accounts/1' % (userIP),verify=False,auth=(userName,userPassword))
accountservice = requests.get('https://%s/redfish/v1/AccountService' % (userIP),verify=False,auth=(userName,userPassword))
chassis = requests.get('https://%s/redfish/v1/Chassis/Self' % (userIP),verify=False,auth=(userName,userPassword))
thermal = requests.get('https://%s/redfish/v1/Chassis/Self/Thermal' % (userIP),verify=False,auth=(userName,userPassword))
compositionservice = requests.get('https://%s/redfish/v1/CompositionService' % (userIP),verify=False,auth=(userName,userPassword))
eventservice = requests.get('https://%s/redfish/v1/EventService' % (userIP),verify=False,auth=(userName,userPassword))
jobservice = requests.get('https://%s/redfish/v1/JobService' % (userIP),verify=False,auth=(userName,userPassword))
sessionservice = requests.get('https://%s/redfish/v1/SessionService' % (userIP),verify=False,auth=(userName,userPassword))
taskservice = requests.get('https://%s/redfish/v1/TaskService' % (userIP),verify=False,auth=(userName,userPassword))
telemetryservice = requests.get('https://%s/redfish/v1/TelemetryService' % (userIP),verify=False,auth=(userName,userPassword))

sysData = sys.json()
selfData = selfa.json()
redfishData = redfish.json()
accountsData = accounts.json()
accountserviceData = accountservice.json()
chassisData = chassis.json()
thermalData = thermal.json()
compositionserviceData = compositionservice.json()
eventserviceData = eventservice.json()
jobserviceData = jobservice.json()
sessionserviceData = sessionservice.json()
taskserviceData = taskservice.json()
telemetryserviceData = telemetryservice.json()

print ("*** Firmware Information ***")
print "Redfish:	{}".format(redfishData[u'RedfishVersion'])
print "BIOS:		{}".format(sysData[u'BiosVersion'])
print "BMC:		{}".format(selfData[u'FirmwareVersion'])
print "Asset Tag:	{}".format(sysData[u'AssetTag'])
print "Module CS:	{}".format(sysData[u'@odata.type'])
print "Module SR:	{}".format(redfishData[u'@odata.type'])
print "Module MA:	{}".format(accountsData[u'@odata.type'])
print "Module AS:	{}".format(accountserviceData[u'@odata.type'])
print "Module CH:	{}".format(chassisData[u'@odata.type'])
print "Module TH:	{}".format(thermalData[u'@odata.type'])
print "Module CC:	{}".format(compositionserviceData[u'@odata.type'])
print "Module ES:	{}".format(eventserviceData[u'@odata.type'])
print "Module JS:	{}".format(jobserviceData[u'@odata.type'])
print "Module SS:	{}".format(sessionserviceData[u'@odata.type'])
print "Module MG:	{}".format(selfData[u'@odata.type'])
print "Module TS:	{}".format(taskserviceData[u'@odata.type'])
print "Module TT:	{}".format(telemetryserviceData[u'@odata.type'])
print "ETag:		{}".format(sysData[u'@odata.etag'])
print ("")
print ("*** System Information ***")
print "Model:		{}".format(sysData[u'Model'])
print "Manufacturer:	{}".format(sysData[u'Manufacturer'])
print "Name:		{}".format(sysData[u'Name'])
print "Power:		{}".format(sysData[u'PowerState'])
print ("")
print ("*** Hardware Information ***")
print "Boot:		{}".format(sysData['Boot'] [u'BootSourceOverrideMode'])
print "Boot Override:	{}".format(sysData['Boot'] [u'BootSourceOverrideEnabled'])
print "Boot TargetOv:	{}".format(sysData['Boot'] [u'BootSourceOverrideTarget'])
print "Id:		{}".format(sysData[u'Id'])
print "Indicator LED:	{}".format(sysData[u'IndicatorLED'])
print "Memory Summ:	{}".format(sysData[u'MemorySummary'] [u'TotalSystemMemoryGiB'])
print "Number of CPU:	{}".format(sysData[u'ProcessorSummary'] [u'Count'])
print "CPU model:	{}".format(sysData[u'ProcessorSummary'] [u'Model'])
print "Health:		{}".format(sysData[u'Status'] [u'Health'])
print "Health Rollup:	{}".format(sysData[u'Status'] [u'HealthRollup'])
print ("")
print ("*** Account Service ***")
print "Lockout After:   {}".format(accountserviceData[u'AccountLockoutCounterResetAfter'])
print "LockoutDuration: {}".format(accountserviceData[u'AccountLockoutDuration'])
print "LockoutThreshold:{}".format(accountserviceData[u'AccountLockoutThreshold'])
print "FailureThreshold:{}".format(accountserviceData[u'AuthFailureLoggingThreshold'])
print "Max Pass Length: {}".format(accountserviceData[u'MaxPasswordLength'])
print "Min Pass Length: {}".format(accountserviceData[u'MinPasswordLength'])
print "Health:          {}".format(accountserviceData[u'Status'] [u'Health'])
print ("")
print ("*** Chassis Information ***")
print "Manufacturer:	{}".format(chassisData[u'Manufacturer'])
print "Model:		{}".format(chassisData[u'Model'])
print "Name:		{}".format(chassisData[u'Name'])
print "SKU:		{}".format(chassisData[u'SKU'])
print "Serial Number:	{}".format(chassisData[u'SerialNumber'])
print "Health:		{}".format(chassisData[u'Status'][u'Health'])
